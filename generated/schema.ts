// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Greeter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Greeter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Greeter entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Greeter", id.toString(), this);
    }
  }

  static load(id: string): Greeter | null {
    return changetype<Greeter | null>(store.get("Greeter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get greetings(): Array<string> | null {
    let value = this.get("greetings");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set greetings(value: Array<string> | null) {
    if (!value) {
      this.unset("greetings");
    } else {
      this.set("greetings", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Greeting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("greeter", Value.fromString(""));
    this.set("timestamp", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Greeting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Greeting entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Greeting", id.toString(), this);
    }
  }

  static load(id: string): Greeting | null {
    return changetype<Greeting | null>(store.get("Greeting", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get greeter(): string {
    let value = this.get("greeter");
    return value!.toString();
  }

  set greeter(value: string) {
    this.set("greeter", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}
